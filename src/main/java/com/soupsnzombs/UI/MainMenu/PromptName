package com.soupsnzombs.UI.MainMenu;

import com.soupsnzombs.GamePanel;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.*;

public class PromptName {
    private static final String[][] keyboardLayout = {
        {"Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"},
        {"A", "S", "D", "F", "G", "H", "J", "K", "L"},
        {"Z", "X", "C", "V", "B", "N", "M"},
        {"Space", "Backspace"}
    };

    private int cursorRow = 0, cursorCol = 0;
    private StringBuilder name = new StringBuilder();
    private final int keyWidth = 60, keyHeight = 60;
    private final int largeKeyWidth = 120, largeKeyHeight = 60;
    private static final int KEYBOARD_X = 50, KEYBOARD_Y = 200;
    private static final int MAX_NAME_LENGTH = 15;
    private JLabel instructionLabel;

    public PromptName() {
        // Create the instruction label and add it to the frame
        instructionLabel = new JLabel("Press J to enter", SwingConstants.CENTER);
        instructionLabel.setFont(new Font("Arial", Font.PLAIN, 18));
        instructionLabel.setBounds(0, 20, 800, 30); // Adjust based on screen size or layout
        instructionLabel.setForeground(Color.BLACK);
    }

    public void drawScores(Graphics2D g2d) {
        if (GamePanel.gameState == GamePanel.GameState.NAME_SELECT) {
            // Draw the keyboard and name input prompt
            drawKeyboard(g2d);
            drawName(g2d);

            // Add the instruction label to the screen
            g2d.setFont(instructionLabel.getFont());
            g2d.setColor(instructionLabel.getForeground());
            g2d.drawString(instructionLabel.getText(), instructionLabel.getX(), instructionLabel.getY());
        }
    }

    private void drawKeyboard(Graphics2D g) {
        g.setColor(Color.LIGHT_GRAY);
        for (int row = 0; row < keyboardLayout.length; row++) {
            for (int col = 0; col < keyboardLayout[row].length; col++) {
                int keyWidthToUse = keyWidth;
                int keyHeightToUse = keyHeight;

                if ("Space".equals(keyboardLayout[row][col]) || "Backspace".equals(keyboardLayout[row][col])) {
                    keyWidthToUse = largeKeyWidth;
                }

                int x = KEYBOARD_X + col * (keyWidthToUse + 10);
                int y = KEYBOARD_Y + row * (keyHeightToUse + 10);

                if (row == cursorRow && col == cursorCol) {
                    g.setColor(Color.YELLOW);
                } else {
                    g.setColor(Color.LIGHT_GRAY);
                }
                g.fillRect(x, y, keyWidthToUse, keyHeightToUse);
                g.setColor(Color.BLACK);
                g.drawRect(x, y, keyWidthToUse, keyHeightToUse);
                FontMetrics fm = g.getFontMetrics();
                String textToDraw = keyboardLayout[row][col];
                int textX = x + (keyWidthToUse - fm.stringWidth(textToDraw)) / 2;
                int textY = y + (keyHeightToUse + fm.getAscent()) / 2 - 5;
                g.drawString(textToDraw, textX, textY);
            }
        }
    }

    private void drawName(Graphics g) {
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", Font.PLAIN, 24));

        String nameText = "Name: " + name.toString();

        int boxX = 50, boxY = 100, padding = 10;
        int boxWidth = 400;
        int boxHeight = 40;

        g.setColor(Color.WHITE);
        g.fillRect(boxX - padding, boxY - padding, boxWidth, boxHeight);

        g.setColor(Color.BLACK);
        g.drawRect(boxX - padding, boxY - padding, boxWidth, boxHeight);

        g.setColor(Color.BLACK);
        g.drawString(nameText, boxX, boxY + g.getFontMetrics().getAscent());
    }

    public void handleKeyPress(KeyEvent e) {
        int keyCode = e.getKeyCode();

        // If J is pressed, print "done"
        if (keyCode == KeyEvent.VK_J) {
            System.out.println("done");
            // write a method to close this and return to game
            GamePanel.gameState = GamePanel.GameState.GAME;
        }

        if (keyCode == KeyEvent.VK_W) {
            cursorRow = Math.max(0, cursorRow - 1);
            adjustCursorForSpaceBackspace();
        } else if (keyCode == KeyEvent.VK_S) {
            cursorRow = Math.min(keyboardLayout.length - 1, cursorRow + 1);
            adjustCursorForSpaceBackspace();
        } else if (keyCode == KeyEvent.VK_A) {
            cursorCol = Math.max(0, cursorCol - 1);
            adjustCursorForSpaceBackspace();
        } else if (keyCode == KeyEvent.VK_D) {
            cursorCol = Math.min(keyboardLayout[cursorRow].length - 1, cursorCol + 1);
            adjustCursorForSpaceBackspace();
        } else if (keyCode == KeyEvent.VK_ENTER) {
            if ("Space".equals(keyboardLayout[cursorRow][cursorCol])) {
                if (name.length() < MAX_NAME_LENGTH) {
                    name.append(" ");
                }
            } else if ("Backspace".equals(keyboardLayout[cursorRow][cursorCol])) {
                if (name.length() > 0) {
                    name.deleteCharAt(name.length() - 1);
                }
            } else {
                if (name.length() < MAX_NAME_LENGTH) {
                    name.append(keyboardLayout[cursorRow][cursorCol]);
                }
            }
        }
    }

    private void adjustCursorForSpaceBackspace() {
        // Prevent the cursor from going out of bounds on special keys
        if ("Space".equals(keyboardLayout[cursorRow][cursorCol]) || "Backspace".equals(keyboardLayout[cursorRow][cursorCol])) {
            // Disable movement beyond space and backspace key rows
            if (cursorRow == keyboardLayout.length - 1) {
                cursorCol = Math.min(keyboardLayout[cursorRow].length - 1, cursorCol);
            }
        }
    }
}
